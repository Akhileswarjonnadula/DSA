#include<stdio.h>
#include<stdlib.h>

struct node{
	int data;
	struct node* left;
	struct node* right;
};

void print_list(struct node **head)
{
	
	struct node *p = *head;
	if(p == NULL){
		printf("\nthe list is empty.");
	}
	else{
		printf("\nElements are: ");
		while(p != NULL){
			printf("%d ", p->data);
			p = p->right;
		}
		printf("\n");
	}
}

void insertion_at_the_end(struct node **head)
{
	int value;
	printf("\nenter the value: ");
	scanf("%d", &value);
	struct node* temp = (struct node*)malloc(sizeof(struct node*));
	temp->data = value;
	temp->left = NULL;
	temp->right = NULL;
	struct node *p = *head;
	
	if(p == NULL)
	{
		*head = temp;
	}
	else
	{
		while(p->right != NULL){
			p = p->right;
		}
		p->right = temp;
		temp->left = p;
	}
	printf("\nThe value inserted successfully.");
}

void insertion_at_specified_position(struct node **head)
{
	struct node *p = *head;
	int pos, val;
	printf("\nenter the position and value to be inserted: ");
	scanf("%d%d", &pos, &val);
	if(pos == 0){
		struct node *temp = (struct node*)malloc(sizeof(struct node*));
		temp->data = val;
		temp->left = NULL;
		*head = temp;
		temp->right = p;
		p->left = temp;
		printf("\ninsertion successfull at specified position.");
	}
	else
	{
		int cnt = 1;
		struct node *p = *head;
		struct node *temp = (struct node*)malloc(sizeof(struct node*));
		temp->data = val;
		temp->right = NULL;
		temp ->left = NULL;
		
		while(p->right != NULL){
			if(pos == cnt)
			    break;
			cnt++;
			p = p->right;    
		}
		if(p == NULL){
			printf("\ninvalid position.");
		}
		else{
			temp->right = p->right;
			p->right->left = temp;
		    p->right = temp;
		    temp->left = p;
		    printf("\ninsertion successfull at specified position.");
		}
	}
}

void deletion(struct node **head)
{
	int target;
	printf("\nenter the target value: ");
	scanf("%d", &target);
	struct node *p = *head;
	while(p != NULL){
		if(p->data == target)
		    break;
		p = p->right;    
	}
	if(p == NULL)
	{
		printf("\ntarget value already not present in the list.");
	}
	else
	{
		struct node *q = p->left;
		if(q == NULL){
			if(p->right == NULL){
				*head = NULL;
		        printf("\ntarget value deleted successfully!");
			} 
		    else{
		    	*head = p->right;
		    	p->right->left = NULL;
		    	p->right = NULL;
		    	free(p);
		    	printf("\ntarget value deleted successfully!");
			}    
		}
		else{
			q->right = p->right;
			if(p->right != NULL)
			    p->right->left = q;
			p->right = NULL;
			p->left = NULL;
			free(p);
			printf("\ntarget value deleted successfully!");    
		}
	}
}

void searching(struct node **head)
{
	int value;
	printf("\nenter the target value to search: ");
	scanf("%d", &value);
	struct node *p = *head;
	int flag = 0;
	while(p != NULL){
		if(p->data == value){
			flag = 1;
			break;
		}
		p = p->right;
	}
	if(flag == 1) 
	    printf("\nthe element is present in the list!");
	else
	    printf("\nthe element is not present in the list!"); 
}

int main()
{
	
	printf("\n***Doubly LinkedList Implementation***");
	struct node *head = NULL;
	
	while(1)
	{
		int opt;
		printf("\nChoose Operation:\n1)insertion at the end \n2)insertion at the specified position \n3)deletion \n4)searching \n5)display \n6)exit \nEnter option: ");
		scanf("%d", &opt);
		if(opt == 1)
		    insertion_at_the_end(&head);
		else if(opt == 2)
		    insertion_at_specified_position(&head);
		else if(opt == 3)
		    deletion(&head);
		else if(opt == 4)
		    searching(&head);
		else if(opt == 5)
		    print_list(&head);
		else if(opt == 6){
			printf("\nThank you.");
			break;
		}
		else {
			break;
		}				    
	}
	
	return 0;
}
