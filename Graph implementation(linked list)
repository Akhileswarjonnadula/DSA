#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *link;
};


struct node *front = NULL;
struct node *rear = NULL;

void Enqueue(int value)
{
	struct node *temp = (struct node*)malloc(sizeof(struct node*));
	temp->data = value;
	temp->link = NULL;
	if(front == NULL)
	    front = rear = temp;
	else
	{
		rear->link = temp;
		rear = temp;
	}
}

void Dequeue()
{
	if(front != NULL)
      {
          struct node *temp = front;
	    front = front->link;
	    temp->link = NULL;
	    free(temp);
	    if(front == NULL)
	        rear = NULL;
      }

}

int Peek()
{
	if(front == NULL)
	    return -1;
	else
		return front->data;
}

int is_Empty_queue()
{
	if(front == NULL)
	    return 1;
	else
	    return 0;
}



struct node *newNode(int value)
{
    struct node *temp = (struct node*)malloc(sizeof(struct node*));
    temp->data = value;
    temp->link = NULL;
    return temp;
}

void add_value(struct node **graph, int u, int v)
{
    struct node *temp = newNode(v);
    struct node *p = graph[u];
    if(p == NULL)
        graph[u] = temp;
    else{
        while(p->link != NULL)
            p = p->link;
        p->link = temp;
    }
}

void add_edge(struct node **graph, int u, int v)
{
    add_value(graph,u,v);
    add_value(graph,v,u);
    printf("\nEdge Established successfully.");
}

void dfs_helper(struct node **graph, int *visited, int v)
{
    printf("%d ", v);
    visited[v] = 1;
    struct node *p = graph[v];
    while(p != NULL)
    {
        if(visited[p->data] == 0)
            dfs_helper(graph, visited, p->data);
        p = p->link;
    }
}

void dfs(struct node **graph, int v)
{
    int *visited = (int*)malloc(7*sizeof(int*));
    int i;
    for(i=0; i<7; i++)
        visited[i] = 0;
    printf("\ndfs: ");
    dfs_helper(graph, visited, v);
}

void bfs(struct node **graph, int v)
{
    int *visited = (int*)malloc(7*sizeof(int*));
    int i;
    for(i=0;i<7; i++)
        visited[i] = 0;
    Enqueue(v);
    visited[v] = 1;
    printf("\nbfs: ");
    while(is_Empty_queue() == 0)
    {
        int value = Peek();
        Dequeue();
        printf("%d ", value);
        struct node *p = graph[value];
        while(p != NULL)
        {
            if(visited[p->data] == 0){
                Enqueue(p->data);
                visited[p->data] = 1;
            }
            p = p->link;
        }
    }
}


int main()
{
    int n=7, i;
    struct node **graph = (struct node**)malloc(n*sizeof(struct node**));

    //add_edge(graph,0,1);           O------O-                   for this n = 5;
    //add_edge(graph,0,4);           |      |  -
    //add_edge(graph,1,2);           |      |    - O
    //add_edge(graph,1,3);           |      |    -
    //add_edge(graph,1,4);           |      |  -
    //add_edge(graph,2,3);           O------O-
    //add_edge(graph,3,4);

    add_edge(graph,1,2);       //this is graph for better explanation for dfs
    add_edge(graph,1,3);
    add_edge(graph,2,4);
    add_edge(graph,3,4);
    add_edge(graph,3,5);
    add_edge(graph,4,5);
    add_edge(graph,4,6);

    //printing of graph
    for(i=0; i<n; i++)
    {
        printf("\n%d -> ", i);
        struct node *p = graph[i];
        while(p != NULL)
        {
            printf("%d - ", p->data);
            p = p->link;
        }
    }

    dfs(graph, 1);
    bfs(graph, 1);

    return 0;
}

